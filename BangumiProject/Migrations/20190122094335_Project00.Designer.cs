// <auto-generated />
using System;
using BangumiProject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BangumiProject.Migrations
{
    [DbContext(typeof(BangumiProjectContext))]
    [Migration("20190122094335_Project00")]
    partial class Project00
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028");

            modelBuilder.Entity("BangumiProject.Areas.Bangumi.Models.Anime", b =>
                {
                    b.Property<int>("AnimeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AnimeInfo");

                    b.Property<string>("AnimeName")
                        .IsRequired();

                    b.Property<int>("AnimeNum");

                    b.Property<string>("AnimePic");

                    b.Property<DateTime>("AnimePlayTime");

                    b.Property<string>("AnimeType")
                        .IsRequired();

                    b.Property<bool>("IsEnd");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("AnimeID");

                    b.HasIndex("AnimeID", "AnimeName", "AnimeType");

                    b.ToTable("Anime");
                });

            modelBuilder.Entity("BangumiProject.Areas.Bangumi.Models.AnimeComm", b =>
                {
                    b.Property<int>("CommID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AnimeID");

                    b.Property<string>("CommStr")
                        .IsRequired();

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("UsersId")
                        .IsRequired();

                    b.HasKey("CommID");

                    b.HasIndex("AnimeID");

                    b.HasIndex("UsersId");

                    b.ToTable("AnimeComms");
                });

            modelBuilder.Entity("BangumiProject.Areas.Bangumi.Models.AnimeMemo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MemoStr");

                    b.Property<int>("NowAnimeNum");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int?>("UserAnimeInfoID");

                    b.HasKey("ID");

                    b.HasIndex("UserAnimeInfoID");

                    b.ToTable("Memos");
                });

            modelBuilder.Entity("BangumiProject.Areas.Bangumi.Models.AnimeNumInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnimeID");

                    b.Property<int>("AnimeNum");

                    b.Property<string>("AnimeNumbInfo");

                    b.Property<bool>("IsStop");

                    b.Property<bool>("IsStopLong");

                    b.Property<DateTime>("PlayTime");

                    b.Property<string>("PlayURL");

                    b.Property<int>("StopCause");

                    b.Property<string>("StopLongStartPlay");

                    b.Property<bool>("StopLongStartPlayDVD");

                    b.Property<int>("StopNum");

                    b.Property<DateTime>("StopTime");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("AnimeNums");
                });

            modelBuilder.Entity("BangumiProject.Areas.Bangumi.Models.AnimeSouce", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AnimeID");

                    b.Property<string>("Info");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Pic");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("URL")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("AnimeID");

                    b.HasIndex("ID", "Name");

                    b.ToTable("AnimeSouces");
                });

            modelBuilder.Entity("BangumiProject.Areas.Bangumi.Models.AnimeSouceComm", b =>
                {
                    b.Property<int>("CommID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AnimeSouceID");

                    b.Property<string>("CommStr")
                        .IsRequired();

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("UsersId");

                    b.HasKey("CommID");

                    b.HasIndex("AnimeSouceID");

                    b.HasIndex("UsersId");

                    b.ToTable("AnimeSouceComms");
                });

            modelBuilder.Entity("BangumiProject.Areas.Bangumi.Models.AnimeTag", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AnimeID");

                    b.Property<string>("TagName");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("TagID");

                    b.HasIndex("AnimeID");

                    b.HasIndex("TagID", "TagName");

                    b.ToTable("AnimeTag");
                });

            modelBuilder.Entity("BangumiProject.Areas.Bangumi.Models.AnimeUserInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("NowAnimeNum");

                    b.Property<int?>("SubAnimeAnimeID");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("UsersId");

                    b.HasKey("ID");

                    b.HasIndex("SubAnimeAnimeID");

                    b.HasIndex("UsersId");

                    b.ToTable("UserAnimeInfos");
                });

            modelBuilder.Entity("BangumiProject.Areas.Blogs.Models.Blogs", b =>
                {
                    b.Property<int>("BlogID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnimeID");

                    b.Property<string>("AnimeInfo");

                    b.Property<string>("AnimeName");

                    b.Property<string>("AnimePic");

                    b.Property<string>("BlogStr")
                        .IsRequired();

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("UpLoadUserId");

                    b.HasKey("BlogID");

                    b.HasIndex("UpLoadUserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("BangumiProject.Areas.Blogs.Models.BlogsComm", b =>
                {
                    b.Property<int>("CommID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BlogsBlogID");

                    b.Property<string>("CommStr");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("UsersId");

                    b.HasKey("CommID");

                    b.HasIndex("BlogsBlogID");

                    b.HasIndex("UsersId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BangumiProject.Areas.Blogs.Models.BlogsTags", b =>
                {
                    b.Property<int>("BolgTagID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlogTagString");

                    b.Property<int?>("BlogsBlogID");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("BolgTagID");

                    b.HasIndex("BlogsBlogID");

                    b.ToTable("BlogTags");
                });

            modelBuilder.Entity("BangumiProject.Areas.Files.Models.FileImages", b =>
                {
                    b.Property<string>("ImageID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentType");

                    b.Property<string>("ImageName")
                        .IsRequired();

                    b.Property<string>("ImagePath")
                        .IsRequired();

                    b.Property<int?>("PhotosID");

                    b.Property<string>("ReadUsers");

                    b.Property<string>("StaticPath");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("UpLoadUsersId");

                    b.HasKey("ImageID");

                    b.HasIndex("PhotosID");

                    b.HasIndex("UpLoadUsersId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("BangumiProject.Areas.Files.Models.FilePhoto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Info");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("ID");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("BangumiProject.Areas.Users.Models.UserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<int>("KenGenChi");

                    b.Property<DateTime>("Time");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("BangumiProject.Areas.Users.Models.Users", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("URL");

                    b.Property<string>("UserBackPic");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserPic");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BangumiProject.Areas.Video.Models.VideoInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.Property<DateTime>("Time");

                    b.Property<string>("VInfo");

                    b.Property<string>("VideoName");

                    b.HasKey("ID");

                    b.ToTable("VideoInfos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "855ac6ed-72b5-4d56-9786-0f32e03da3e7",
                            ConcurrencyStamp = "4631c981-4c57-4b7d-958c-e1a42f78ce98",
                            Name = "Admin,",
                            NormalizedName = "ADMIN,"
                        },
                        new
                        {
                            Id = "fdf41a43-688a-4294-881f-bf59fa6b1738",
                            ConcurrencyStamp = "dd9dcdf1-1ff1-45be-9924-d092308cabd6",
                            Name = "Girl,",
                            NormalizedName = "GIRL,"
                        },
                        new
                        {
                            Id = "cb3420c5-2d47-4b24-ac02-e403d93d9ea3",
                            ConcurrencyStamp = "5b690d0d-6e1a-43b3-b7ee-d58243d84412",
                            Name = "Yuri5,",
                            NormalizedName = "YURI5,"
                        },
                        new
                        {
                            Id = "0292817c-324f-46ff-bdd7-a62988a9a914",
                            ConcurrencyStamp = "b9ec249e-7d87-40f3-8a2a-f4dc612bf7bf",
                            Name = "Yuri4,",
                            NormalizedName = "YURI4,"
                        },
                        new
                        {
                            Id = "7e9ba309-320d-4d6f-a978-a62a52bcd80a",
                            ConcurrencyStamp = "3f3c087a-e084-4d05-b37e-3f85962fe07e",
                            Name = "Yuri3,",
                            NormalizedName = "YURI3,"
                        },
                        new
                        {
                            Id = "329dc6b2-19f2-4026-b22a-e716a4dff7f0",
                            ConcurrencyStamp = "ccc813c2-4803-41c6-bbd9-5ecc6e63806f",
                            Name = "Yuri2,",
                            NormalizedName = "YURI2,"
                        },
                        new
                        {
                            Id = "86211fa7-2c8f-4b3d-b4d8-ca89a5fa29c2",
                            ConcurrencyStamp = "f99bdf4b-e392-4ada-930c-0025b7e91b27",
                            Name = "Yuri1,",
                            NormalizedName = "YURI1,"
                        },
                        new
                        {
                            Id = "1157339b-2e85-4e30-9cb8-6a0dee8ecebd",
                            ConcurrencyStamp = "613de846-f82f-4f83-82f0-be40e895d690",
                            Name = "Boy,",
                            NormalizedName = "BOY,"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BangumiProject.Areas.Bangumi.Models.AnimeComm", b =>
                {
                    b.HasOne("BangumiProject.Areas.Bangumi.Models.Anime", "Anime")
                        .WithMany("AnimeComms")
                        .HasForeignKey("AnimeID")
                        .HasConstraintName("AnimeComm_Anime_PK");

                    b.HasOne("BangumiProject.Areas.Users.Models.Users", "Users")
                        .WithMany("AnimeComms")
                        .HasForeignKey("UsersId")
                        .HasConstraintName("AnimeComm_User_PK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BangumiProject.Areas.Bangumi.Models.AnimeMemo", b =>
                {
                    b.HasOne("BangumiProject.Areas.Bangumi.Models.AnimeUserInfo", "UserAnimeInfo")
                        .WithMany("Memos")
                        .HasForeignKey("UserAnimeInfoID")
                        .HasConstraintName("Memo_UserAnimeInfo_PK");
                });

            modelBuilder.Entity("BangumiProject.Areas.Bangumi.Models.AnimeSouce", b =>
                {
                    b.HasOne("BangumiProject.Areas.Bangumi.Models.Anime", "Anime")
                        .WithMany("Souce")
                        .HasForeignKey("AnimeID")
                        .HasConstraintName("AnimeSouce_Anime_PK");
                });

            modelBuilder.Entity("BangumiProject.Areas.Bangumi.Models.AnimeSouceComm", b =>
                {
                    b.HasOne("BangumiProject.Areas.Bangumi.Models.AnimeSouce", "AnimeSouce")
                        .WithMany("AnimeSouceComms")
                        .HasForeignKey("AnimeSouceID")
                        .HasConstraintName("AnimeSouceComm_AnimeSouce_PK");

                    b.HasOne("BangumiProject.Areas.Users.Models.Users", "Users")
                        .WithMany("AnimeSouceComms")
                        .HasForeignKey("UsersId")
                        .HasConstraintName("AnimeSouceComm_User_PK");
                });

            modelBuilder.Entity("BangumiProject.Areas.Bangumi.Models.AnimeTag", b =>
                {
                    b.HasOne("BangumiProject.Areas.Bangumi.Models.Anime", "Anime")
                        .WithMany("Tags")
                        .HasForeignKey("AnimeID")
                        .HasConstraintName("AnimeTag_Anime_PK");
                });

            modelBuilder.Entity("BangumiProject.Areas.Bangumi.Models.AnimeUserInfo", b =>
                {
                    b.HasOne("BangumiProject.Areas.Bangumi.Models.Anime", "SubAnime")
                        .WithMany("UserAnimeInfos")
                        .HasForeignKey("SubAnimeAnimeID")
                        .HasConstraintName("UserAnimeInfo_Anime_PK");

                    b.HasOne("BangumiProject.Areas.Users.Models.Users", "Users")
                        .WithMany("UserAnimeInfos")
                        .HasForeignKey("UsersId")
                        .HasConstraintName("UserAnimeInfo_User_PK");
                });

            modelBuilder.Entity("BangumiProject.Areas.Blogs.Models.Blogs", b =>
                {
                    b.HasOne("BangumiProject.Areas.Users.Models.Users", "UpLoadUser")
                        .WithMany("Blogs")
                        .HasForeignKey("UpLoadUserId")
                        .HasConstraintName("Blog_User_PK");
                });

            modelBuilder.Entity("BangumiProject.Areas.Blogs.Models.BlogsComm", b =>
                {
                    b.HasOne("BangumiProject.Areas.Blogs.Models.Blogs", "Blogs")
                        .WithMany("Comments")
                        .HasForeignKey("BlogsBlogID")
                        .HasConstraintName("Comment_Blogs_PK");

                    b.HasOne("BangumiProject.Areas.Users.Models.Users", "Users")
                        .WithMany("Comments")
                        .HasForeignKey("UsersId")
                        .HasConstraintName("Comment_User_PK");
                });

            modelBuilder.Entity("BangumiProject.Areas.Blogs.Models.BlogsTags", b =>
                {
                    b.HasOne("BangumiProject.Areas.Blogs.Models.Blogs", "Blogs")
                        .WithMany("TagIDs")
                        .HasForeignKey("BlogsBlogID")
                        .HasConstraintName("BlogTags_Blog_PK");
                });

            modelBuilder.Entity("BangumiProject.Areas.Files.Models.FileImages", b =>
                {
                    b.HasOne("BangumiProject.Areas.Files.Models.FilePhoto", "Photos")
                        .WithMany("Images")
                        .HasForeignKey("PhotosID")
                        .HasConstraintName("Image_Photo_PK");

                    b.HasOne("BangumiProject.Areas.Users.Models.Users", "UpLoadUsers")
                        .WithMany("Images")
                        .HasForeignKey("UpLoadUsersId")
                        .HasConstraintName("Images_User_PK");
                });

            modelBuilder.Entity("BangumiProject.Areas.Users.Models.UserRole", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BangumiProject.Areas.Users.Models.Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BangumiProject.Areas.Users.Models.Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BangumiProject.Areas.Users.Models.Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BangumiProject.Areas.Users.Models.Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
